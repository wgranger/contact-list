{"version":3,"sources":["components/Table/TableHeader.tsx","components/Avatar/Avatar.tsx","components/Table/RowControls.tsx","components/Table/TableRow.tsx","components/Table/Table.tsx","components/ErrorBanner/ErrorBanner.tsx","helpers/client.js","helpers/parseData.js","App.tsx","index.tsx"],"names":["TableHeader","activeRows","setActiveRows","rows","allSelected","length","toggleRows","inputRef","React","useRef","current","input","indeterminate","checked","id","name","onChange","onKeyDown","e","key","ref","type","htmlFor","icon","faEllipsisH","Avatar","initials","split","map","alias","className","RowControls","visible","useState","isOpen","setOpen","activeControl","setActiveControl","buttonRef","toggleControl","control","pressedEscape","keyCode","clickedOffControl","target","contains","useEffect","window","addEventListener","removeEventListener","style","visibility","onClick","stopPropagation","faCaretDown","onBlur","TableRow","row","activeRow","includes","toggleRow","activeRowsCopy","slice","rowIndex","indexOf","splice","push","contact","value","toLocaleString","location","deals","tags","join","toString","Table","contacts","i","renderRows","ErrorBanner","message","toggleBanner","faExclamationCircle","faTimes","fetchResources","options","url","corsAnywhere","method","headers","process","axios","then","response","catch","error","console","log","findContactDeals","contactId","filter","deal","findDealValues","values","currency","convertCurrency","sum","reduce","a","b","toFixed","parseInt","findLocation","city","state","country","findTags","contactTags","tagIds","tag","fullTag","tagsText","curTag","parseData","data","parsedData","firstName","lastName","App","fetchError","setFetchError","setContacts","validData","setResources","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.864be864.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEllipsisH } from '@fortawesome/free-solid-svg-icons'\nimport { Row } from 'types'\n\nexport interface TableHeaderProps {\n  activeRows: Array<Row>;\n  setActiveRows: (value: Row[]) => void;\n  rows: Array<Row>;\n}\n\nexport default function TableHeader({ activeRows, setActiveRows, rows }: TableHeaderProps) {\n  const allSelected = activeRows.length === rows.length\n\n  const toggleRows = () => {\n    const nextState = allSelected ? [] : rows\n    setActiveRows(nextState)\n  }\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n\n  if (inputRef && inputRef.current) {\n    const input = inputRef.current\n    if (allSelected) {\n      input.indeterminate = false\n    } else if (activeRows.length === 0) {\n      input.indeterminate = false\n    } else {\n      input.indeterminate = true\n    }\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') toggleRows()\n  }\n\n  return (\n    <thead>\n      <tr>\n        <th>\n          <input\n            checked={allSelected}\n            id='checkAll'\n            name='checkAll'\n            onChange={toggleRows}\n            onKeyDown={handleKeyDown}\n            ref={inputRef}\n            type='checkbox'\n          />\n          <label htmlFor=\"checkAll\">contact</label>\n        </th>\n        <th>total value</th>\n        <th>location</th>\n        <th>deals</th>\n        <th>tags</th>\n        <th>\n          <FontAwesomeIcon icon={faEllipsisH} />\n        </th>\n      </tr>\n    </thead>\n  )\n}\n","import React from 'react'\n\nexport interface AvatarProps {\n  name?: string\n}\n\nexport default function Avatar({ name }: AvatarProps) {\n  const initials = name && name.split(' ').map(alias => alias[0])\n\n  return (\n    <div className='avatar'>\n      <span>{initials}</span>\n    </div>\n  )\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons'\n\ninterface RowControlsProps {\n  visible: boolean\n}\n\nexport default function RowControls({ visible }: RowControlsProps) {\n  const [isOpen, setOpen] = React.useState<boolean>(false)\n  const [activeControl, setActiveControl] = React.useState<string>('Email')\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n  const toggleOpen = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation()\n    setOpen(!isOpen)\n  }\n  const toggleControl = (control: string) => {\n    setOpen(false)\n    setActiveControl(control)\n  }\n\n  function pressedEscape(e: KeyboardEvent) {\n    const ESC_KEY_CODE = 27\n    if (e.keyCode === ESC_KEY_CODE) setOpen(false)\n  }\n\n  function clickedOffControl(e: Event) {\n    const target = e.target as HTMLElement;\n    const ref = buttonRef && buttonRef.current\n    if (ref && !ref.contains(target)) setOpen(false)\n  }\n\n  React.useEffect(() => {\n    window.addEventListener('keyup', pressedEscape)\n    window.addEventListener('click', clickedOffControl)\n\n    return () => {\n      window.removeEventListener('keyup', pressedEscape)\n      window.removeEventListener('click', clickedOffControl)\n    }\n  }, [])\n\n  return (\n    <div className='row-controls' style={{ visibility: visible ? 'visible' : 'collapse' }}>\n      <button\n        className='row-controls__label'\n        onClick={toggleOpen}\n        ref={buttonRef}\n      >\n        <div>\n          <span>{activeControl}</span>\n        </div>\n        <FontAwesomeIcon icon={faCaretDown} />\n      </button>\n      {isOpen && (\n        <div className='row-controls__dropdown'>\n          <div>\n            <button onClick={() => toggleControl('Edit')}>Edit</button>\n            <button onClick={() => toggleControl('Email')}>Email</button>\n            <button onClick={() => toggleControl('Call')} onBlur={() => setOpen(false)}>Call</button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport Avatar from '../Avatar'\nimport RowControls from './RowControls'\nimport { Row } from 'types'\n\nexport interface TableRowProps {\n  activeRows: Row[];\n  setActiveRows: (value: Row[]) => void;\n  row: Row;\n}\n\nexport default function TableRow({ activeRows, setActiveRows, row }: TableRowProps) {\n  const activeRow = activeRows.includes(row)\n  const toggleRow = (e?: React.MouseEvent<HTMLTableRowElement, MouseEvent> | React.ChangeEvent<HTMLInputElement>) => {\n    const activeRowsCopy = activeRows.slice()\n    if (activeRow) {\n      const rowIndex = activeRowsCopy.indexOf(row)\n      activeRowsCopy.splice(rowIndex, 1)\n    } else {\n      activeRowsCopy.push(row)\n    }\n    setActiveRows(activeRowsCopy)\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') toggleRow()\n  }\n\n  return (\n    <tr onClick={toggleRow}>\n      <td>\n        <div className='contacts-table__contact'>\n          <input\n            type='checkbox'\n            checked={activeRow}\n            id={row.contact}\n            name={row.contact}\n            onChange={toggleRow}\n            onKeyDown={handleKeyDown}\n          />\n          <label htmlFor={row.contact}>\n            <Avatar name={row.contact} />\n          </label>\n          <span>{row.contact}</span>\n        </div>\n      </td>\n      <td>{`$${row.value.toLocaleString()}`}</td>\n      <td>{row.location}</td>\n      <td>{row.deals}</td>\n      <td>{row.tags && row.tags.join(', ').toString()}</td>\n      <td>\n        <RowControls visible={activeRow} />\n      </td>\n    </tr>\n  )\n}\n","import React from 'react'\nimport TableHeader from './TableHeader'\nimport TableRow from './TableRow'\nimport { Row } from 'types'\n\ninterface TableProps {\n  contacts: Row[]\n}\n\nfunction renderRows(activeRows: Row[], setActiveRows: (value: Row[]) => void, rows: Row[]) {\n  return rows.map((row, i) => {\n    return (\n      <TableRow\n        key={`TABLE_ROW_${i}`}\n        activeRows={activeRows}\n        setActiveRows={setActiveRows}\n        row={row}\n      />\n    )\n  })\n}\n\nexport default function Table({ contacts }: TableProps) {\n  const [activeRows, setActiveRows] = React.useState<Row[]>([])\n\n  return (\n    <table className='contacts-table'>\n      <TableHeader\n        activeRows={activeRows}\n        setActiveRows={setActiveRows}\n        rows={contacts}\n      />\n      <tbody>\n        {renderRows(activeRows, setActiveRows, contacts)}\n      </tbody>\n    </table>\n  )\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes, faExclamationCircle } from '@fortawesome/free-solid-svg-icons'\n\ninterface ErrorBannerProps {\n  message?: string;\n  toggleBanner: (value: boolean) => void;\n}\n\nconst DEFAULT_MESSAGE = 'Unable to process request, please refresh the page'\n\nexport default function ErrorBanner({ message = DEFAULT_MESSAGE, toggleBanner }: ErrorBannerProps) {\n  return (\n    <div className='error-banner'>\n      <div>\n        <FontAwesomeIcon icon={faExclamationCircle} />\n        <span>{message}</span>\n      </div>\n      <div>\n        <button onClick={() => toggleBanner(false)}>\n          <FontAwesomeIcon icon={faTimes} />\n        </button>\n      </div>\n    </div>\n  )\n}\n","import axios from 'axios'\n\nexport default function fetchResources() {\n  const key = process.env.REACT_APP_API_KEY\n  const corsAnywhere = process.env.REACT_APP_CORS_ANYWHERE\n  const host = process.env.REACT_APP_HOST\n  const version = '/api/3'\n  const resource = '/contacts'\n  const includes = '?include=deals,contactTags.tag,contactLists.list'\n  const path = corsAnywhere + host + version + resource + includes\n\n  const options = {\n    url: path,\n    method: 'GET',\n    headers: {\n      'Api-Token': key,\n      'Content-Type': 'application/json;charset=UTF-8'\n    }\n  }\n  return axios(options).then(response => {\n    return response\n  }).catch(error => {\n    console.log(error);\n    return error\n  })\n}\n","// rates accurate as of 7/21/2020\nexport function convertCurrency(currency, value) {\n  switch (currency) {\n    case 'aud':\n      value = value * 0.71\n      break;\n    case 'eur':\n      value = value * 1.15\n      break;\n    default:\n      value = value * 1\n  }\n  return value\n}\n\nexport function findContactDeals(contactId, deals) {\n  return deals.filter(deal => deal.contact === contactId)\n}\n\nexport function findDealValues(contactId, deals) {\n  const contactDeals = findContactDeals(contactId, deals)\n  const values = contactDeals.map(deal => convertCurrency(deal.currency, deal.value))\n\n  if (!values.length) return 0\n  const sum = values.reduce((a,b) => a + b).toFixed(2)\n  return parseInt(sum)\n}\n\nexport function findLocation(contact) {\n  const { city, state, country } = contact\n  const fullLocation = city && state && country\n  return fullLocation ? `${city}, ${state}, ${country}` : ''\n}\n\nexport function findTags(contactId, contactTags, tags) {\n  const associatedTags = contactTags.filter(tag => tag.contact === contactId)\n  const tagIds = associatedTags.map(fullTag => fullTag.tag)\n  const tagsText = []\n\n  for (let i = 0; i < tags.length; i++) {\n    const curTag = tags[i]\n    if (tagIds.includes(curTag.id)) {\n      tagsText.push(curTag.tag)\n    }\n  }\n\n  return tagsText\n}\n\nexport function parseData(data) {\n  let parsedData = []\n  if (!data) return parsedData\n\n  let { contacts, contactTags, deals, tags } = data\n\n  if (contacts) {\n    parsedData = contacts.map(contact => {\n      return {\n        contact: `${contact.firstName} ${contact.lastName}`,\n        value: findDealValues(contact.id, deals),\n        location: findLocation(contact),\n        deals: findContactDeals(contact.id, deals).length,\n        tags: findTags(contact.id, contactTags, tags)\n      }\n    })\n  }\n  return parsedData\n}\n","import React from 'react';\nimport Table from './components/Table'\nimport ErrorBanner from './components/ErrorBanner'\nimport fetchResources from 'helpers/client'\nimport { parseData } from 'helpers/parseData'\nimport { Row } from 'types'\n\nfunction App() {\n  const [fetchError, setFetchError] = React.useState<boolean>(false)\n  const [contacts, setContacts] = React.useState<Row[]>([])\n\n  React.useEffect(() => {\n    const setResources = async () => {\n      const response = await fetchResources()\n\n      const validData = response?.data\n      if (validData) {\n        const parsedData = parseData(validData)\n        setContacts(parsedData)\n      } else {\n        setFetchError(true)\n      }\n    }\n    setResources()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {fetchError && <ErrorBanner toggleBanner={setFetchError} />}\n      <Table contacts={contacts} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}